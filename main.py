# main.py
import os
import time
import ccxt
import pandas as pd
import ta
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏)
# –í Replit secrets –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ os.getenv()
if os.path.exists('.env'):
    load_dotenv()

# ------------------ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ------------------
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
TESTNET = os.getenv("TESTNET", "False").lower() in ("1", "true", "yes")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –¢–û–ü-200 –ù–ê–ô–õ–Ü–ö–í–Ü–î–ù–Ü–®–ò–• –¢–û–ö–ï–ù–Ü–í –ù–ê BYBIT USDT PERPETUAL (–æ–Ω–æ–≤–ª–µ–Ω–æ 2025-10-20)
# –ú–µ–º–∫–æ—ó–Ω–∏ –∑ –º–∞–ª–æ—é —Ü—ñ–Ω–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ñ–æ—Ä–º–∞—Ç 1000X (1000SHIB, 1000PEPE, —Ç–æ—â–æ)
DEFAULT_SYMBOLS = """BTC/USDT:USDT,ETH/USDT:USDT,SOL/USDT:USDT,BNB/USDT:USDT,XRP/USDT:USDT,ADA/USDT:USDT,AVAX/USDT:USDT,DOT/USDT:USDT,LINK/USDT:USDT,DOGE/USDT:USDT,TON/USDT:USDT,TRX/USDT:USDT,MATIC/USDT:USDT,SUI/USDT:USDT,UNI/USDT:USDT,1000PEPE/USDT:USDT,LTC/USDT:USDT,NEAR/USDT:USDT,APT/USDT:USDT,HBAR/USDT:USDT,BCH/USDT:USDT,ICP/USDT:USDT,ARB/USDT:USDT,SHIB/USDT:USDT,OP/USDT:USDT,STX/USDT:USDT,TAO/USDT:USDT,WIF/USDT:USDT,TWT/USDT:USDT,FIL/USDT:USDT,AAVE/USDT:USDT,INJ/USDT:USDT,SEI/USDT:USDT,ATOM/USDT:USDT,MKR/USDT:USDT,IMX/USDT:USDT,VET/USDT:USDT,1000BONK/USDT:USDT,GRT/USDT:USDT,ALGO/USDT:USDT,1000FLOKI/USDT:USDT,TIA/USDT:USDT,ETC/USDT:USDT,RUNE/USDT:USDT,FTM/USDT:USDT,THETA/USDT:USDT,JUP/USDT:USDT,SAND/USDT:USDT,AXS/USDT:USDT,MANA/USDT:USDT,HYPE/USDT:USDT,VIRTUAL/USDT:USDT,MOVE/USDT:USDT,USUAL/USDT:USDT,POPCAT/USDT:USDT,RENDER/USDT:USDT,POL/USDT:USDT,GRASS/USDT:USDT,ME/USDT:USDT,TRUMP/USDT:USDT,XLM/USDT:USDT,GALA/USDT:USDT,PENDLE/USDT:USDT,PYTH/USDT:USDT,ORDI/USDT:USDT,WLD/USDT:USDT,JASMY/USDT:USDT,BLUR/USDT:USDT,CRV/USDT:USDT,LDO/USDT:USDT,BRETT/USDT:USDT,APE/USDT:USDT,AR/USDT:USDT,ONDO/USDT:USDT,SNX/USDT:USDT,EGLD/USDT:USDT,BEAM/USDT:USDT,STRK/USDT:USDT,AIOZ/USDT:USDT,FLOW/USDT:USDT,ROSE/USDT:USDT,MINA/USDT:USDT,DYM/USDT:USDT,GMT/USDT:USDT,CHZ/USDT:USDT,XTZ/USDT:USDT,SUSHI/USDT:USDT,1INCH/USDT:USDT,COMP/USDT:USDT,ENJ/USDT:USDT,CELO/USDT:USDT,KAVA/USDT:USDT,ZIL/USDT:USDT,BAT/USDT:USDT,LRC/USDT:USDT,ANKR/USDT:USDT,SKL/USDT:USDT,AUDIO/USDT:USDT,STORJ/USDT:USDT,NKN/USDT:USDT,ACH/USDT:USDT,YFI/USDT:USDT,ZEC/USDT:USDT,DASH/USDT:USDT,WAVES/USDT:USDT,MASK/USDT:USDT,LPT/USDT:USDT,MAGIC/USDT:USDT,CFX/USDT:USDT,AXL/USDT:USDT,ONE/USDT:USDT,ALT/USDT:USDT,MEME/USDT:USDT,BOME/USDT:USDT,PEOPLE/USDT:USDT,IO/USDT:USDT,ZK/USDT:USDT,NOT/USDT:USDT,LISTA/USDT:USDT,ZRO/USDT:USDT,OMNI/USDT:USDT,REZ/USDT:USDT,SAGA/USDT:USDT,W/USDT:USDT,ENA/USDT:USDT,AEVO/USDT:USDT,METIS/USDT:USDT,DGB/USDT:USDT,FXS/USDT:USDT,CELR/USDT:USDT,GMX/USDT:USDT,RDNT/USDT:USDT,WOO/USDT:USDT,SFP/USDT:USDT,HOOK/USDT:USDT,ID/USDT:USDT,HIGH/USDT:USDT,GAS/USDT:USDT,DYDX/USDT:USDT,SSV/USDT:USDT,MAV/USDT:USDT,EDU/USDT:USDT,CYBER/USDT:USDT,ARK/USDT:USDT,QNT/USDT:USDT,VANRY/USDT:USDT,PIXEL/USDT:USDT,PORTAL/USDT:USDT,ACE/USDT:USDT,NFP/USDT:USDT,AI/USDT:USDT,XAI/USDT:USDT,MANTA/USDT:USDT,JTO/USDT:USDT,AUCTION/USDT:USDT,PEPE/USDT:USDT,FLOKI/USDT:USDT,TRB/USDT:USDT,CORE/USDT:USDT,BONK/USDT:USDT,GOAT/USDT:USDT,PNUT/USDT:USDT,ACT/USDT:USDT,NEIRO/USDT:USDT,TURBO/USDT:USDT,DOGS/USDT:USDT,HMSTR/USDT:USDT,CATI/USDT:USDT,EIGEN/USDT:USDT,SCR/USDT:USDT,CETUS/USDT:USDT,ETHFI/USDT:USDT,BIGTIME/USDT:USDT"""

SYMBOLS = os.getenv("SYMBOLS", DEFAULT_SYMBOLS).split(",")
TIMEFRAME = "5m"
ORDER_SIZE_USDT = 8.0  # $8 per trade
LEVERAGE = 15
TP_PERCENT = 5.0  # –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ 5%
SL_PERCENT = 2.0
MAX_CONCURRENT_POSITIONS = 10  # 18 –ø–æ–∑–∏—Ü—ñ–π (–±–∞–ª–∞–Ω—Å $90 / $5 = 18)
POLL_INTERVAL = 20
HISTORY_LIMIT = 200

# –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É –ø–æ–º–∏–ª–æ–∫
last_balance_warning = 0  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
TRADES_HISTORY_FILE = "trades_history.json"
POSITIONS_FILE = "active_positions.json"

# ------------------ –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ------------------
if not API_KEY or not API_SECRET:
    raise SystemExit("–ü–æ–º–∏–ª–∫–∞: –≤—Å—Ç–∞–Ω–æ–≤–∏ API_KEY —Ç–∞ API_SECRET —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    print("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ.")

# ------------------ –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–π–¥—ñ–≤ ------------------
def load_trades_history():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–π–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(TRADES_HISTORY_FILE, 'r') as f:
            return json.load(f)
    except:
        return {"trades": [], "total_profit_usdt": 0.0, "wins": 0, "losses": 0}

def save_trades_history(history):
    """–ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–π–¥—ñ–≤ —É —Ñ–∞–π–ª"""
    try:
        with open(TRADES_HISTORY_FILE, 'w') as f:
            json.dump(history, f, indent=2)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")

trades_history = load_trades_history()

# ------------------ –õ–æ–∫–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º) ------------------
def load_positions():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(POSITIONS_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_positions(positions):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —É —Ñ–∞–π–ª"""
    try:
        with open(POSITIONS_FILE, 'w') as f:
            json.dump(positions, f, indent=2)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")

local_positions = load_positions()

# ------------------ Telegram Bot –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ------------------
def tg_send(text, buttons=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            if buttons:
                data["reply_markup"] = json.dumps({"inline_keyboard": buttons})
            requests.post(url, data=data, timeout=10)
        except Exception as e:
            print(f"Telegram send error: {e}")
    print(f"[TG] {text}")

def send_main_menu():
    """–ù–∞–¥—Å–∏–ª–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = [
        [{"text": "üìä –ó–≤—ñ—Ç", "callback_data": "report"}],
        [{"text": "üíº –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
        [{"text": "üìà –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó", "callback_data": "positions"}]
    ]
    tg_send("üì± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", buttons)

last_update_id = 0

def handle_telegram_callback():
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ)"""
    global last_update_id
    if not TELEGRAM_TOKEN:
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        params = {"timeout": 1, "offset": last_update_id + 1}
        response = requests.get(url, params=params, timeout=5).json()
        
        if response.get("ok") and response.get("result"):
            for update in response["result"]:
                update_id = update.get("update_id", 0)
                last_update_id = max(last_update_id, update_id)
                
                if "callback_query" in update:
                    callback_query = update["callback_query"]
                    callback = callback_query["data"]
                    callback_id = callback_query["id"]
                    
                    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
                    answer_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery"
                    requests.post(answer_url, json={"callback_query_id": callback_id}, timeout=5)
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
                    if callback == "report":
                        send_report()
                    elif callback == "balance":
                        send_balance()
                    elif callback == "positions":
                        send_active_positions()
    except:
        pass

def send_report():
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é"""
    history = trades_history
    wins = history.get("wins", 0)
    losses = history.get("losses", 0)
    total_trades = wins + losses
    total_profit = history.get("total_profit_usdt", 0.0)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ % –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ $25)
    initial_deposit = 25.0
    profit_percent = (total_profit / initial_deposit * 100) if initial_deposit > 0 else 0
    
    msg = f"""üìä <b>–ó–í–Ü–¢ –ü–†–û –¢–û–†–ì–Ü–í–õ–Æ</b>

‚úÖ –í–∏–≥—Ä–∞—à—ñ–≤: {wins}
‚ùå –ü—Ä–æ–≥—Ä–∞—à—ñ–≤: {losses}
üìà –í—Å—å–æ–≥–æ —Ç—Ä–µ–π–¥—ñ–≤: {total_trades}

üí∞ –ü—Ä–∏–±—É—Ç–æ–∫: {total_profit:+.2f} USDT ({profit_percent:+.1f}%)"""
    
    tg_send(msg)

def send_balance():
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å"""
    balance = get_available_balance()
    msg = f"""üíº <b>–ë–ê–õ–ê–ù–°</b>

üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} USDT"""
    tg_send(msg)

def send_active_positions():
    """–ù–∞–¥—Å–∏–ª–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
    positions = get_open_positions_from_exchange()
    
    if not positions:
        tg_send("üìà <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î</b>")
        return
    
    msg = "üìà <b>–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á</b>\n\n"
    for pos in positions:
        symbol = pos.get('symbol', 'N/A')
        side = pos.get('side', 'N/A')
        size = pos.get('contracts', 0)
        entry = pos.get('entryPrice', 0)
        unrealized_pnl = pos.get('unrealizedPnl', 0)
        
        msg += f"üî∏ {symbol} {side.upper()}\n"
        msg += f"   –†–æ–∑–º—ñ—Ä: {size}\n"
        msg += f"   –í—Ö—ñ–¥: {entry:.4f}\n"
        msg += f"   PnL: {unrealized_pnl:+.2f} USDT\n\n"
    
    tg_send(msg)

# ------------------ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit ------------------
exchange = ccxt.bybit({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "enableRateLimit": True,
    "options": {
        "defaultType": "swap",
        "enableUnifiedAccount": True,
        "enableUnifiedMargin": True,
        "recvWindow": 10000,
    }
})
exchange.set_sandbox_mode(TESTNET)

def now():
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

# ------------------ –£—Ç–∏–ª—ñ—Ç–∏ ------------------
def get_available_balance():
    """–û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω–∏–π USDT –±–∞–ª–∞–Ω—Å"""
    try:
        balance = exchange.fetch_balance()
        usdt_free = float(balance.get('USDT', {}).get('free', 0))
        return usdt_free
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0.0

def get_open_positions_from_exchange():
    """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ"""
    try:
        positions = exchange.fetch_positions()
        open_pos = [p for p in positions if float(p.get('contracts', 0)) > 0]
        return open_pos
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

def fetch_ohlcv_df(symbol, timeframe=TIMEFRAME, limit=HISTORY_LIMIT):
    bars = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(bars, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

def calculate_indicators(df):
    # –ë–∞–∑–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    df['EMA5'] = ta.trend.ema_indicator(df['close'], window=5)    # –ù–û–í–ò–ô: –ö–æ—Ä–æ—Ç–∫–∏–π —ñ–º–ø—É–ª—å—Å
    df['EMA20'] = ta.trend.ema_indicator(df['close'], window=20)
    df['EMA50'] = ta.trend.ema_indicator(df['close'], window=50)
    df['EMA200'] = ta.trend.ema_indicator(df['close'], window=200)  # –ü–†–û: –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥
    df['RSI14'] = ta.momentum.rsi(df['close'], window=14)
    df['volEMA20'] = df['volume'].ewm(span=20).mean()
    
    # –ü–†–û–§–ï–°–Ü–ô–ù–Ü –Ü–ù–î–ò–ö–ê–¢–û–†–ò
    # ADX - –≤–∏–º—ñ—Ä—é—î –°–ò–õ–£ —Ç—Ä–µ–Ω–¥—É (–∫–ª—é—á–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä!)
    adx_indicator = ta.trend.ADXIndicator(df['high'], df['low'], df['close'], window=14)
    df['ADX'] = adx_indicator.adx()
    
    # ATR - —Ñ—ñ–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (—É–Ω–∏–∫–∞—Ç–∏ —Ñ–ª–µ—Ç—É!)
    atr_indicator = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14)
    df['ATR'] = atr_indicator.average_true_range()
    
    # MACD - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç—Ä–µ–Ω–¥
    macd_indicator = ta.trend.MACD(df['close'])
    df['MACD'] = macd_indicator.macd()
    df['MACD_signal'] = macd_indicator.macd_signal()
    
    # Bollinger Bands - –≤–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å
    bb_indicator = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
    df['BB_upper'] = bb_indicator.bollinger_hband()
    df['BB_lower'] = bb_indicator.bollinger_lband()
    df['BB_middle'] = bb_indicator.bollinger_mavg()
    
    return df

def signal_from_df(df, symbol="", btc_rsi=None, btc_adx=None, ema20_15m=None, ema50_15m=None):
    last = df.iloc[-1]
    prev = df.iloc[-2]
    rsi_4bars_ago = df.iloc[-4] if len(df) >= 4 else df.iloc[0]
    atr_3bars_ago = df.iloc[-3] if len(df) >= 3 else df.iloc[0]
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π ATR: –≤–µ–ª–∏–∫—ñ –º–æ–Ω–µ—Ç–∏ (>$10) –ª–µ–≥—à–µ, –º–∞–ª—ñ - –∂–æ—Ä—Å—Ç–∫—ñ—à–µ
    if last['close'] > 10:
        min_atr_percent = 0.002  # BTC, ETH, SOL - –º'—è–∫—à–µ!
    elif last['close'] > 0.1:
        min_atr_percent = 0.003  # –ó–≤–∏—á–∞–π–Ω—ñ –º–æ–Ω–µ—Ç–∏
    else:
        min_atr_percent = 0.01   # –ú–µ–º–∫–æ—ó–Ω–∏
    atr_pct = last['ATR'] / last['close'] if last['close'] > 0 else 0
    
    # EMA200 —Ç—Ä–µ–Ω–¥
    ema200_long_allowed = last['close'] > last['EMA200']
    ema200_short_allowed = last['close'] < last['EMA200']
    
    # ‚ö° –ü–û–ö–†–ê–©–ï–ù–ù–Ø 2: BTC —Ñ—ñ–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (skip BTC/ETH)
    btc_allows_long = True
    btc_allows_short = True
    if btc_rsi is not None and btc_adx is not None and symbol not in ["BTC/USDT:USDT", "ETH/USDT:USDT"]:
        # –Ø–∫—â–æ BTC —É —Ñ–ª–µ—Ç—ñ (ADX < 20) –∞–±–æ –±–æ–∫–æ–≤–∏–∫—É (RSI 45-55) - –Ω–µ —Ç–æ—Ä–≥—É—î–º–æ!
        if btc_adx < 20 or (45 < btc_rsi < 55):
            btc_allows_long = False
            btc_allows_short = False
        # –°—Ç–∞—Ä—ñ —É–º–æ–≤–∏
        elif btc_rsi < 50:
            btc_allows_long = False
        elif btc_rsi > 60:
            btc_allows_short = False
    
    # ‚ö° –ü–û–ö–†–ê–©–ï–ù–ù–Ø 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 15m —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
    tf15m_allows_long = True
    tf15m_allows_short = True
    if ema20_15m is not None and ema50_15m is not None:
        # LONG —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞ 15m —Ç–∞–∫–æ–∂ uptrend
        if ema20_15m < ema50_15m:
            tf15m_allows_long = False
        # SHORT —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞ 15m —Ç–∞–∫–æ–∂ downtrend
        if ema20_15m > ema50_15m:
            tf15m_allows_short = False
    
    # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É EMA
    ema_distance = abs(last['EMA20'] - last['EMA50']) / last['close']
    strong_trend = ema_distance > 0.003
    
    # –°–¢–†–ê–¢–ï–ì–Ü–Ø: 12 –ë–ê–ó–û–í–ò–• + 3 –Ü–ú–ü–£–õ–¨–° + 2 –ö–†–ò–¢–ò–ß–ù–Ü + 2 –ü–û–ö–†–ê–©–ï–ù–ù–Ø = 19 –§–Ü–õ–¨–¢–†–Ü–í!
    
    # LONG —É–º–æ–≤–∏ (20 —Ñ—ñ–ª—å—Ç—Ä—ñ–≤):
    long_cond = (
        # === 12 –°–¢–ê–†–ò–• –§–Ü–õ–¨–¢–†–Ü–í ===
        (last['EMA20'] > last['EMA50']) and          # 1. Uptrend
        (last['close'] > last['EMA20']) and          # 2. –¶—ñ–Ω–∞ –≤–∏—â–µ EMA20
        (last['RSI14'] > 55) and                     # 3. RSI —Å–∏–ª—å–Ω–∏–π
        (last['RSI14'] < 70) and                     # 4. RSI –Ω–µ –ø–µ—Ä–µ–≥—Ä—ñ–≤
        (last['volume'] > last['volEMA20'] * 1.25) and # 5. –û–±—Å—è–≥ √ó1.25 (–ú'–Ø–ö–®–ï!)
        (last['ADX'] > 25) and                       # 6. –°–ò–õ–¨–ù–ò–ô —Ç—Ä–µ–Ω–¥ (–í–ê–†–Ü–ê–ù–¢ A)
        (last['MACD'] > last['MACD_signal']) and     # 7. MACD –∫—Ä–æ—Å–æ–≤–µ—Ä
        (last['MACD'] > 0) and                       # 8. MACD –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π (–ü–û–í–ï–†–ù–£–¢–û!)
        (last['close'] < last['BB_upper'] * 1.005) and # 9. –ï–¢–ê–ü 1: Breakout –¥–æ–∑–≤–æ–ª–µ–Ω–æ!
        ema200_long_allowed and                      # 10. EMA200 (–ü–û–í–ï–†–ù–£–¢–û!)
        btc_allows_long and                          # 11. BTC —Ñ—ñ–ª—å—Ç—Ä (–ü–û–ö–†–ê–©–ï–ù–û!)
        (prev['close'] < last['close']) and          # 12. Candle confirmation
        # === 3 –ù–û–í–ò–• –§–Ü–õ–¨–¢–†–ò ===
        (last['EMA5'] > last['EMA20']) and           # 13. –ù–û–í–ò–ô: –ö–æ—Ä–æ—Ç–∫–∏–π —ñ–º–ø—É–ª—å—Å!
        (last['RSI14'] > rsi_4bars_ago['RSI14'] + 2.5) and  # 14. RSI —Ä–æ—Å—Ç–µ +2.5 (–í–ê–†–Ü–ê–ù–¢ A)
        (last['ATR'] > atr_3bars_ago['ATR']) and     # 15. –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î!
        # === –ï–¢–ê–ü 2 ===
        (last['high'] > df['high'].iloc[-6:-1].max() if len(df) >= 6 else True) and  # 16. –ù–æ–≤–∏–π HIGH!
        # === –ö–†–ò–¢–ò–ß–ù–Ü –§–Ü–õ–¨–¢–†–ò (BUG FIX!) ===
        (atr_pct >= min_atr_percent) and             # 17. ATR –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π!
        strong_trend and                             # 18. –°–∏–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ EMA!
        # === –ü–û–ö–†–ê–©–ï–ù–ù–Ø 3: 15m —Ç–∞–π–º—Ñ—Ä–µ–π–º ===
        tf15m_allows_long                            # 19. 15m uptrend!
    )
    
    # SHORT —É–º–æ–≤–∏ (20 —Ñ—ñ–ª—å—Ç—Ä—ñ–≤):
    short_cond = (
        # === 12 –°–¢–ê–†–ò–• –§–Ü–õ–¨–¢–†–Ü–í ===
        (last['EMA20'] < last['EMA50']) and          # 1. Downtrend
        (last['close'] < last['EMA20']) and          # 2. –¶—ñ–Ω–∞ –Ω–∏–∂—á–µ EMA20
        (last['RSI14'] < 45) and                     # 3. RSI —Å–ª–∞–±–∫–∏–π
        (last['RSI14'] > 30) and                     # 4. RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ
        (last['volume'] > last['volEMA20'] * 1.25) and # 5. –û–±—Å—è–≥ √ó1.25 (–ú'–Ø–ö–®–ï!)
        (last['ADX'] > 25) and                       # 6. –°–ò–õ–¨–ù–ò–ô —Ç—Ä–µ–Ω–¥ (–í–ê–†–Ü–ê–ù–¢ A)
        (last['MACD'] < last['MACD_signal']) and     # 7. MACD –∫—Ä–æ—Å–æ–≤–µ—Ä
        (last['MACD'] < 0) and                       # 8. MACD –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π (–ü–û–í–ï–†–ù–£–¢–û!)
        (last['close'] > last['BB_lower'] * 0.995) and # 9. –ï–¢–ê–ü 1: Breakout –¥–æ–∑–≤–æ–ª–µ–Ω–æ!
        ema200_short_allowed and                     # 10. EMA200 (–ü–û–í–ï–†–ù–£–¢–û!)
        btc_allows_short and                         # 11. BTC —Ñ—ñ–ª—å—Ç—Ä (–ü–û–ö–†–ê–©–ï–ù–û!)
        (prev['close'] > last['close']) and          # 12. Candle confirmation
        # === 3 –ù–û–í–ò–• –§–Ü–õ–¨–¢–†–ò ===
        (last['EMA5'] < last['EMA20']) and           # 13. –ö–æ—Ä–æ—Ç–∫–∏–π —ñ–º–ø—É–ª—å—Å –≤–Ω–∏–∑!
        (last['RSI14'] < rsi_4bars_ago['RSI14'] - 2.5) and  # 14. RSI –ø–∞–¥–∞—î -2.5 (–í–ê–†–Ü–ê–ù–¢ A)
        (last['ATR'] > atr_3bars_ago['ATR']) and     # 15. –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î!
        # === –ï–¢–ê–ü 2 ===
        (last['low'] < df['low'].iloc[-6:-1].min() if len(df) >= 6 else True) and  # 16. –ù–æ–≤–∏–π LOW!
        # === –ö–†–ò–¢–ò–ß–ù–Ü –§–Ü–õ–¨–¢–†–ò (BUG FIX!) ===
        (atr_pct >= min_atr_percent) and             # 17. ATR –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π!
        strong_trend and                             # 18. –°–∏–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ EMA!
        # === –ü–û–ö–†–ê–©–ï–ù–ù–Ø 3: 15m —Ç–∞–π–º—Ñ—Ä–µ–π–º ===
        tf15m_allows_short                           # 19. 15m downtrend!
    )
    
    # üîç DEBUG: –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –í–°–Ü–• —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (–∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ!)
    long_conditions = {
            "1.EMA20>EMA50": last['EMA20'] > last['EMA50'],
            "2.close>EMA20": last['close'] > last['EMA20'],
            "3.RSI>55": last['RSI14'] > 55,
            "4.RSI<70": last['RSI14'] < 70,
            "5.Vol√ó1.25": last['volume'] > last['volEMA20'] * 1.25,
            "6.ADX>25": last['ADX'] > 25,
            "7.MACD_cross": last['MACD'] > last['MACD_signal'],
            "8.MACD>0": last['MACD'] > 0,
            "9.BB_breakout": last['close'] < last['BB_upper'] * 1.005,
            "10.EMA200": ema200_long_allowed,
            "11.BTC_filter": btc_allows_long,
            "12.Candle": prev['close'] < last['close'],
            "13.EMA5>EMA20": last['EMA5'] > last['EMA20'],
            "14.RSI_impulse": last['RSI14'] > rsi_4bars_ago['RSI14'] + 2.5,
            "15.ATR_growth": last['ATR'] > atr_3bars_ago['ATR'],
            "16.New_HIGH": last['high'] > df['high'].iloc[-6:-1].max() if len(df) >= 6 else True,
            "17.ATR_min": atr_pct >= min_atr_percent,
            "18.Strong_trend": strong_trend,
            "19.15m_uptrend": tf15m_allows_long
        }
    short_conditions = {
            "1.EMA20<EMA50": last['EMA20'] < last['EMA50'],
            "2.close<EMA20": last['close'] < last['EMA20'],
            "3.RSI<45": last['RSI14'] < 45,
            "4.RSI>30": last['RSI14'] > 30,
            "5.Vol√ó1.25": last['volume'] > last['volEMA20'] * 1.25,
            "6.ADX>25": last['ADX'] > 25,
            "7.MACD_cross": last['MACD'] < last['MACD_signal'],
            "8.MACD<0": last['MACD'] < 0,
            "9.BB_breakout": last['close'] > last['BB_lower'] * 0.995,
            "10.EMA200": ema200_short_allowed,
            "11.BTC_filter": btc_allows_short,
            "12.Candle": prev['close'] > last['close'],
            "13.EMA5<EMA20": last['EMA5'] < last['EMA20'],
            "14.RSI_impulse": last['RSI14'] < rsi_4bars_ago['RSI14'] - 2.5,
            "15.ATR_growth": last['ATR'] > atr_3bars_ago['ATR'],
            "16.New_LOW": last['low'] < df['low'].iloc[-6:-1].min() if len(df) >= 6 else True,
            "17.ATR_min": atr_pct >= min_atr_percent,
            "18.Strong_trend": strong_trend,
            "19.15m_downtrend": tf15m_allows_short
        }
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ (–∑–∞–≤–∂–¥–∏!)
    failed_long = [k for k, v in long_conditions.items() if not v]
    failed_short = [k for k, v in short_conditions.items() if not v]
    
    if last['EMA20'] > last['EMA50'] and failed_long:
        print(f"   ‚ùå LONG blocked by: {', '.join(failed_long)}")
    if last['EMA20'] < last['EMA50'] and failed_short:
        print(f"   ‚ùå SHORT blocked by: {', '.join(failed_short)}")
    if last['EMA20'] == last['EMA50']:
        print(f"   ‚ö†Ô∏è SIDEWAYS: EMA20 == EMA50 (–Ω–µ–º–∞—î —Ç—Ä–µ–Ω–¥—É)")
    
    if long_cond:
        print(f"   üöÄ LONG SIGNAL! All 19 filters passed!")
        return "LONG"
    if short_cond:
        print(f"   üìâ SHORT SIGNAL! All 19 filters passed!")
        return "SHORT"
    return "NONE"

def can_open_new_position(symbol, cached_positions=None):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ —Å–∏–º–≤–æ–ª—ñ
    
    Args:
        symbol: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
        cached_positions: –ö–µ—à–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó (—â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ 151 –∑–∞–ø–∏—Ç –¥–æ API!)
    """
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ (—è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ)
    positions = cached_positions if cached_positions is not None else get_open_positions_from_exchange()
    
    for p in positions:
        if p.get('symbol') == symbol and float(p.get('contracts', 0)) > 0:
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –ø–æ–∑–∏—Ü—ñ–π
    if len(positions) >= MAX_CONCURRENT_POSITIONS:
        return False
    return True

def calculate_amount(order_usdt, price, leverage=LEVERAGE):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
    # –ó –ø–ª–µ—á–µ–º: —Ç—Ä–µ–±–∞ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ leverage —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: $5 margin √ó 10 leverage = $50 exposure
    position_size = order_usdt * leverage
    amount = position_size / price
    return float(round(amount, 6))

# ------------------ –¢–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó ------------------
def set_leverage(symbol, value):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–ª–µ—á–µ –¥–ª—è —Å–∏–º–≤–æ–ª—É"""
    try:
        exchange.set_leverage(value, symbol)
    except Exception as e:
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É "leverage not modified" - –ø–ª–µ—á–µ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if "110043" not in str(e):  # retCode 110043 = leverage already set
            print(f"Leverage warning {symbol}: {e}")

def open_position(symbol, side, atr=None):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é –∑ TP/SL –Ω–∞ –±—ñ—Ä–∂—ñ
    
    Args:
        symbol: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
        side: LONG –∞–±–æ SHORT
        atr: ATR –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ TP/SL (—è–∫—â–æ None - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ %)
    """
    global last_balance_warning
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
        available_balance = get_available_balance()
        if available_balance < ORDER_SIZE_USDT:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ - –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ä–∞–∑ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
            current_time = time.time()
            if current_time - last_balance_warning > 300:  # 5 —Ö–≤–∏–ª–∏–Ω
                print(f"{now()} ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤: {available_balance:.2f} USDT < {ORDER_SIZE_USDT}")
                tg_send(f"‚ö†Ô∏è <b>–ù–ï–î–û–°–¢–ê–¢–ù–¨–û –ö–û–®–¢–Ü–í</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {available_balance:.2f} USDT\nüìä –ü–æ—Ç—Ä—ñ–±–Ω–æ: {ORDER_SIZE_USDT} USDT")
                last_balance_warning = current_time
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        price = float(ticker['last'])
        amount = calculate_amount(ORDER_SIZE_USDT, price, LEVERAGE)
        ccxt_side = 'buy' if side == "LONG" else 'sell'
        
        # ‚ö° –ü–û–ö–†–ê–©–ï–ù–ù–Ø 1: –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π TP/SL –Ω–∞ –±–∞–∑—ñ ATR –∑ –º—ñ–Ω—ñ–º—É–º–∞–º–∏
        # –ú—ñ–Ω—ñ–º—É–º–∏: TP >= 1.5%, SL >= 0.5%, TP –∑–∞–≤–∂–¥–∏ >= SL √ó 2
        MIN_TP_PERCENT = 1.5
        MIN_SL_PERCENT = 0.5
        
        if atr is not None and atr > 0:
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π TP/SL: TP = entry ¬± ATR√ó3, SL = entry ¬± ATR√ó1.5
            atr_tp_distance = atr * 3.0
            atr_sl_distance = atr * 1.5
            
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è—Ö
            min_sl_distance = price * (MIN_SL_PERCENT / 100)
            
            # SL = –º–∞–∫—Å–∏–º—É–º –∑ ATR√ó1.5 –∞–±–æ –º—ñ–Ω—ñ–º—É–º—É 0.5%
            sl_distance = max(atr_sl_distance, min_sl_distance)
            
            # TP = –º–∞–∫—Å–∏–º—É–º –∑ (ATR√ó3, SL√ó2, –º—ñ–Ω—ñ–º—É–º 1.5%)
            min_tp_by_ratio = sl_distance * 2  # TP –∑–∞–≤–∂–¥–∏ >= SL √ó 2
            min_tp_distance = price * (MIN_TP_PERCENT / 100)
            tp_distance = max(atr_tp_distance, min_tp_by_ratio, min_tp_distance)
            
            if side == "LONG":
                tp_price = price + tp_distance
                sl_price = price - sl_distance
            else:  # SHORT
                tp_price = price - tp_distance
                sl_price = price + sl_distance
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ % –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            tp_percent = abs((tp_price - price) / price * 100)
            sl_percent = abs((sl_price - price) / price * 100)
        else:
            # –§—ñ–∫—Å–æ–≤–∞–Ω—ñ % (fallback)
            tp_price = price * (1 + TP_PERCENT/100) if side == "LONG" else price * (1 - TP_PERCENT/100)
            sl_price = price * (1 - SL_PERCENT/100) if side == "LONG" else price * (1 + SL_PERCENT/100)
            tp_percent = TP_PERCENT
            sl_percent = SL_PERCENT
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        set_leverage(symbol, LEVERAGE)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        print(f"{now()} ‚Üí –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ {side} {symbol} amount={amount} price‚âà{price:.4f}")
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä
        order = exchange.create_market_order(symbol, ccxt_side, amount)
        
        # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ TP —ñ SL —á–µ—Ä–µ–∑ Bybit API
        time.sleep(1.0)  # –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ—Ä–¥–µ—Ä–∞
        
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç symbol –¥–ª—è Bybit V5 API
            # BTC/USDT:USDT -> BTCUSDT
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            # –î–ª—è Bybit Unified Trading –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            params = {
                'category': 'linear',
                'symbol': bybit_symbol,
                'takeProfit': str(round(tp_price, 4)),
                'stopLoss': str(round(sl_price, 4)),
                'tpTriggerBy': 'LastPrice',
                'slTriggerBy': 'LastPrice',
                'positionIdx': 0  # 0 = One-Way Mode (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ!)
            }
            
            print(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—é TP/SL –¥–ª—è {bybit_symbol}: TP={tp_price:.4f}, SL={sl_price:.4f}")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ Bybit –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL
            response = exchange.private_post_v5_position_trading_stop(params)
            print(f"‚úÖ TP/SL –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—ñ—Ä–∂—ñ: TP={tp_price:.4f}, SL={sl_price:.4f}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å –±—ñ—Ä–∂—ñ: {response}")
            
        except Exception as e:
            print(f"üö® –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: TP/SL –ù–ï –í–ò–°–¢–ê–í–õ–ï–ù–û –Ω–∞ –±—ñ—Ä–∂—ñ: {e}")
            tg_send(f"üö® <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê!</b>\n\nTP/SL –ù–ï –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è {symbol}!\n–ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n‚ö†Ô∏è –ó–ê–ö–†–ò–ô–¢–ï –ü–û–ó–ò–¶–Ü–Æ –í–†–£–ß–ù–£!")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
        atr_mode = "ATR√ó3/1.5" if atr is not None else "Fixed"
        msg = f"""‚úÖ <b>–ü–û–ó–ò–¶–Ü–Æ –í–Ü–î–ö–†–ò–¢–û</b>

üî∏ {symbol} {side}
üí∞ –í—Ö—ñ–¥: {price:.4f} USDT
üìä –†–æ–∑–º—ñ—Ä: ${ORDER_SIZE_USDT} (√ó{LEVERAGE})
üéØ TP: {tp_price:.4f} (+{tp_percent:.1f}%)
üõ° SL: {sl_price:.4f} (-{sl_percent:.1f}%)
‚ö° Mode: {atr_mode}"""
        
        tg_send(msg)
        return True
        
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
        tg_send(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
        return False

# –ë–û–¢ –ù–ï –ó–ê–ö–†–ò–í–ê–Ñ –ü–û–ó–ò–¶–Ü–á - —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—î —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î TP/SL –Ω–∞ –±—ñ—Ä–∂—ñ
# –ü–æ–∑–∏—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è –±—ñ—Ä–∂–µ—é –ø–æ TP/SL

# ------------------ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ------------------
def main_loop():
    mode = "TESTNET" if TESTNET else "üî¥ MAINNET"
    startup_msg = f"""ü§ñ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û</b>

–†–µ–∂–∏–º: {mode}
üíº –ë–∞–ª–∞–Ω—Å: {get_available_balance():.2f} USDT
üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {len(SYMBOLS)} –º–æ–Ω–µ—Ç
‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {POLL_INTERVAL}s"""
    
    if not TESTNET:
        startup_msg += "\n\n‚ö†Ô∏è <b>–†–ï–ê–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø!</b>"
    
    tg_send(startup_msg)
    send_main_menu()
    
    print("=== –°—Ç–∞—Ä—Ç –±–æ—Ç-—Ü–∏–∫–ª—É ===")
    
    while True:
        try:
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ Telegram
            handle_telegram_callback()
            
            # ‚ö° –ü–û–ö–†–ê–©–ï–ù–ù–Ø 2+3: –û—Ç—Ä–∏–º—É—î–º–æ BTC RSI + ADX –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
            btc_rsi = None
            btc_adx = None
            try:
                btc_df = fetch_ohlcv_df("BTC/USDT:USDT")
                btc_df = calculate_indicators(btc_df)
                btc_rsi = btc_df.iloc[-1]['RSI14']
                btc_adx = btc_df.iloc[-1]['ADX']
                print(f"üìä BTC RSI: {btc_rsi:.1f} | ADX: {btc_adx:.1f}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ BTC –¥–∞–Ω—ñ: {e}")
            
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–µ—à—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó 1 —Ä–∞–∑ –Ω–∞ —Ü–∏–∫–ª (–±—É–ª–æ 151 –∑–∞–ø–∏—Ç!)
            cached_positions = get_open_positions_from_exchange()
            print(f"üìä –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(cached_positions)}/{MAX_CONCURRENT_POSITIONS}")
            
            # –®—É–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
            for symbol in SYMBOLS:
                if not can_open_new_position(symbol, cached_positions):
                    print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é {symbol} (–≤–∂–µ —î –ø–æ–∑–∏—Ü—ñ—è –∞–±–æ –ª—ñ–º—ñ—Ç)")
                    continue
                
                try:
                    print(f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol}...")
                    df = fetch_ohlcv_df(symbol, timeframe=TIMEFRAME)
                    df = calculate_indicators(df)
                    
                    # ‚ö° –ü–û–ö–†–ê–©–ï–ù–ù–Ø 3: –û—Ç—Ä–∏–º—É—î–º–æ 15m —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    ema20_15m = None
                    ema50_15m = None
                    try:
                        df_15m = fetch_ohlcv_df(symbol, timeframe="15m", limit=100)
                        df_15m = calculate_indicators(df_15m)
                        ema20_15m = df_15m.iloc[-1]['EMA20']
                        ema50_15m = df_15m.iloc[-1]['EMA50']
                    except:
                        pass  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—Ñ—ñ–ª—å—Ç—Ä –±—É–¥–µ True)
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –∑ DEBUG (19 —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)
                    last = df.iloc[-1]
                    prev = df.iloc[-2]
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π ATR: –≤–µ–ª–∏–∫—ñ –º–æ–Ω–µ—Ç–∏ (>$10) –ª–µ–≥—à–µ
                    if last['close'] > 10:
                        min_atr_percent = 0.002  # BTC, ETH, SOL - –º'—è–∫—à–µ!
                    elif last['close'] > 0.1:
                        min_atr_percent = 0.003  # –ó–≤–∏—á–∞–π–Ω—ñ –º–æ–Ω–µ—Ç–∏
                    else:
                        min_atr_percent = 0.01   # –ú–µ–º–∫–æ—ó–Ω–∏
                    atr_pct = (last['ATR'] / last['close'] * 100) if last['close'] > 0 else 0
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ volume
                    vol_status = "‚ö†Ô∏è ZERO!" if last['volume'] == 0 else f"{last['volume']:.0f}"
                    
                    print(f"   üí∞ –¶—ñ–Ω–∞: {last['close']:.4f}")
                    print(f"   üìä EMA: 5={last['EMA5']:.4f} | 20={last['EMA20']:.4f} | 50={last['EMA50']:.4f} | 200={last['EMA200']:.4f}")
                    if ema20_15m and ema50_15m:
                        print(f"   üìä 15m EMA: 20={ema20_15m:.4f} | 50={ema50_15m:.4f} {'üìà' if ema20_15m > ema50_15m else 'üìâ'}")
                    print(f"   üìâ RSI: {last['RSI14']:.1f} (need: 55-70 LONG, 30-45 SHORT)")
                    print(f"   üí™ ADX: {last['ADX']:.1f} (need >25) {'‚úÖ' if last['ADX'] > 25 else '‚ùå'}")
                    print(f"   üî• ATR: {last['ATR']:.6f} = {atr_pct:.3f}% (need {min_atr_percent*100:.1f}%) {'‚úÖ' if atr_pct/100 >= min_atr_percent else '‚ùå'}")
                    print(f"   üìà MACD: {last['MACD']:.6f} | Signal: {last['MACD_signal']:.6f} {'‚úÖ' if last['MACD'] > last['MACD_signal'] else '‚ùå'}")
                    print(f"   üíπ Volume: {vol_status} | volEMA20: {last['volEMA20']:.0f} (√ó1.25 = {last['volEMA20']*1.25:.0f}) {'‚úÖ' if last['volume'] > last['volEMA20']*1.25 else '‚ùå'}")
                    
                    sig = signal_from_df(df, symbol=symbol, btc_rsi=btc_rsi, btc_adx=btc_adx, ema20_15m=ema20_15m, ema50_15m=ema50_15m)
                    print(f"   ‚ö° –°–∏–≥–Ω–∞–ª: {sig}")
                    
                    if sig == "LONG" and can_open_new_position(symbol, cached_positions):
                        print(f"üöÄ –í—ñ–¥–∫—Ä–∏–≤–∞—é LONG {symbol}")
                        open_position(symbol, "LONG", atr=last['ATR'])
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                        cached_positions = get_open_positions_from_exchange()
                    elif sig == "SHORT" and can_open_new_position(symbol, cached_positions):
                        print(f"üìâ –í—ñ–¥–∫—Ä–∏–≤–∞—é SHORT {symbol}")
                        open_position(symbol, "SHORT", atr=last['ATR'])
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                        cached_positions = get_open_positions_from_exchange()
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {symbol}: {e}")
                    continue
                
                time.sleep(1)
            
            time.sleep(POLL_INTERVAL)
            
        except Exception as e:
            print(f"{now()} ‚ùå Critical error: {e}")
            time.sleep(5)

if __name__ == "__main__":
    try:
        main_loop()
    except KeyboardInterrupt:
        print("\n=== –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ ===")
        tg_send("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
