# main.py
import os
import time
import ccxt
import pandas as pd
import ta
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# ------------------ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ------------------
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
TESTNET = os.getenv("TESTNET", "False").lower() in ("1", "true", "yes")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

SYMBOLS = os.getenv("SYMBOLS", "AVAX/USDT:USDT,LINK/USDT:USDT,ADA/USDT:USDT,DOGE/USDT:USDT,XRP/USDT:USDT").split(",")
TIMEFRAME = "5m"
ORDER_SIZE_USDT = 5.0  # $5 per trade (–ø—Ä–∞—Ü—é—î –¥–ª—è –¥–µ—à–µ–≤–∏—Ö –º–æ–Ω–µ—Ç)
LEVERAGE = 10
TP_PERCENT = 5.0
SL_PERCENT = 2.0
MAX_CONCURRENT_POSITIONS = 10
POLL_INTERVAL = 20
HISTORY_LIMIT = 200

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–µ–π–¥—ñ–≤
TRADES_HISTORY_FILE = "trades_history.json"

# ------------------ –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ------------------
if not API_KEY or not API_SECRET:
    raise SystemExit("–ü–æ–º–∏–ª–∫–∞: –≤—Å—Ç–∞–Ω–æ–≤–∏ API_KEY —Ç–∞ API_SECRET —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    print("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ.")

# ------------------ –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–π–¥—ñ–≤ ------------------
def load_trades_history():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–π–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(TRADES_HISTORY_FILE, 'r') as f:
            return json.load(f)
    except:
        return {"trades": [], "total_profit_usdt": 0.0, "wins": 0, "losses": 0}

def save_trades_history(history):
    """–ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–π–¥—ñ–≤ —É —Ñ–∞–π–ª"""
    try:
        with open(TRADES_HISTORY_FILE, 'w') as f:
            json.dump(history, f, indent=2)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")

trades_history = load_trades_history()

# ------------------ Telegram Bot –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ------------------
def tg_send(text, buttons=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            if buttons:
                data["reply_markup"] = json.dumps({"inline_keyboard": buttons})
            requests.post(url, data=data, timeout=10)
        except Exception as e:
            print(f"Telegram send error: {e}")
    print(f"[TG] {text}")

def send_main_menu():
    """–ù–∞–¥—Å–∏–ª–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = [
        [{"text": "üìä –ó–≤—ñ—Ç", "callback_data": "report"}],
        [{"text": "üíº –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
        [{"text": "üìà –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó", "callback_data": "positions"}]
    ]
    tg_send("üì± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", buttons)

def handle_telegram_callback():
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ)"""
    if not TELEGRAM_TOKEN:
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        params = {"timeout": 1, "offset": -1}
        response = requests.get(url, params=params, timeout=5).json()
        
        if response.get("ok") and response.get("result"):
            for update in response["result"]:
                if "callback_query" in update:
                    callback = update["callback_query"]["data"]
                    
                    if callback == "report":
                        send_report()
                    elif callback == "balance":
                        send_balance()
                    elif callback == "positions":
                        send_active_positions()
    except:
        pass

def send_report():
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é"""
    history = trades_history
    wins = history.get("wins", 0)
    losses = history.get("losses", 0)
    total_trades = wins + losses
    total_profit = history.get("total_profit_usdt", 0.0)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ % –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ $25)
    initial_deposit = 25.0
    profit_percent = (total_profit / initial_deposit * 100) if initial_deposit > 0 else 0
    
    msg = f"""üìä <b>–ó–í–Ü–¢ –ü–†–û –¢–û–†–ì–Ü–í–õ–Æ</b>

‚úÖ –í–∏–≥—Ä–∞—à—ñ–≤: {wins}
‚ùå –ü—Ä–æ–≥—Ä–∞—à—ñ–≤: {losses}
üìà –í—Å—å–æ–≥–æ —Ç—Ä–µ–π–¥—ñ–≤: {total_trades}

üí∞ –ü—Ä–∏–±—É—Ç–æ–∫: {total_profit:+.2f} USDT ({profit_percent:+.1f}%)"""
    
    tg_send(msg)

def send_balance():
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å"""
    balance = get_available_balance()
    msg = f"""üíº <b>–ë–ê–õ–ê–ù–°</b>

üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} USDT"""
    tg_send(msg)

def send_active_positions():
    """–ù–∞–¥—Å–∏–ª–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
    positions = get_open_positions_from_exchange()
    
    if not positions:
        tg_send("üìà <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î</b>")
        return
    
    msg = "üìà <b>–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á</b>\n\n"
    for pos in positions:
        symbol = pos.get('symbol', 'N/A')
        side = pos.get('side', 'N/A')
        size = pos.get('contracts', 0)
        entry = pos.get('entryPrice', 0)
        unrealized_pnl = pos.get('unrealizedPnl', 0)
        
        msg += f"üî∏ {symbol} {side.upper()}\n"
        msg += f"   –†–æ–∑–º—ñ—Ä: {size}\n"
        msg += f"   –í—Ö—ñ–¥: {entry:.4f}\n"
        msg += f"   PnL: {unrealized_pnl:+.2f} USDT\n\n"
    
    tg_send(msg)

# ------------------ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit ------------------
exchange = ccxt.bybit({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "enableRateLimit": True,
    "options": {
        "defaultType": "swap",
        "enableUnifiedAccount": True,
        "enableUnifiedMargin": True,
        "recvWindow": 10000,
    }
})
exchange.set_sandbox_mode(TESTNET)

def now():
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

# ------------------ –£—Ç–∏–ª—ñ—Ç–∏ ------------------
def get_available_balance():
    """–û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω–∏–π USDT –±–∞–ª–∞–Ω—Å"""
    try:
        balance = exchange.fetch_balance()
        usdt_free = float(balance.get('USDT', {}).get('free', 0))
        return usdt_free
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0.0

def get_open_positions_from_exchange():
    """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ"""
    try:
        positions = exchange.fetch_positions()
        open_pos = [p for p in positions if float(p.get('contracts', 0)) > 0]
        return open_pos
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

def fetch_ohlcv_df(symbol, timeframe=TIMEFRAME, limit=HISTORY_LIMIT):
    bars = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(bars, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

def calculate_indicators(df):
    df['EMA20'] = ta.trend.ema_indicator(df['close'], window=20)
    df['EMA50'] = ta.trend.ema_indicator(df['close'], window=50)
    df['RSI14'] = ta.momentum.rsi(df['close'], window=14)
    df['volEMA20'] = df['volume'].ewm(span=20).mean()
    return df

def signal_from_df(df):
    last = df.iloc[-1]
    long_cond = (last['EMA20'] > last['EMA50']) and (last['close'] > last['EMA20']) and (last['RSI14'] > 60) and (last['volume'] > last['volEMA20'])
    short_cond = (last['EMA20'] < last['EMA50']) and (last['close'] < last['EMA20']) and (last['RSI14'] < 40) and (last['volume'] > last['volEMA20'])
    if long_cond:
        return "LONG"
    if short_cond:
        return "SHORT"
    return "NONE"

def can_open_new_position(symbol):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ —Å–∏–º–≤–æ–ª—ñ"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ
    positions = get_open_positions_from_exchange()
    for p in positions:
        if p.get('symbol') == symbol and float(p.get('contracts', 0)) > 0:
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –ø–æ–∑–∏—Ü—ñ–π
    if len(positions) >= MAX_CONCURRENT_POSITIONS:
        return False
    return True

def calculate_amount(order_usdt, price, leverage=LEVERAGE):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
    # –ó –ø–ª–µ—á–µ–º: —Ç—Ä–µ–±–∞ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ leverage —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: $5 margin √ó 10 leverage = $50 exposure
    position_size = order_usdt * leverage
    amount = position_size / price
    return float(round(amount, 6))

# ------------------ –¢–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó ------------------
def set_leverage(symbol, value):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–ª–µ—á–µ –¥–ª—è —Å–∏–º–≤–æ–ª—É"""
    try:
        exchange.set_leverage(value, symbol)
    except Exception as e:
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É "leverage not modified" - –ø–ª–µ—á–µ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if "110043" not in str(e):  # retCode 110043 = leverage already set
            print(f"Leverage warning {symbol}: {e}")

def open_position(symbol, side):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é –∑ TP/SL –Ω–∞ –±—ñ—Ä–∂—ñ"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
        available_balance = get_available_balance()
        if available_balance < ORDER_SIZE_USDT:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ - –ù–ï –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            print(f"{now()} ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è {symbol}: {available_balance:.2f} < {ORDER_SIZE_USDT}")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        price = float(ticker['last'])
        amount = calculate_amount(ORDER_SIZE_USDT, price, LEVERAGE)
        ccxt_side = 'buy' if side == "LONG" else 'sell'
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP/SL —Ü—ñ–Ω–∏
        tp_price = price * (1 + TP_PERCENT/100) if side == "LONG" else price * (1 - TP_PERCENT/100)
        sl_price = price * (1 - SL_PERCENT/100) if side == "LONG" else price * (1 + SL_PERCENT/100)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        set_leverage(symbol, LEVERAGE)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        print(f"{now()} ‚Üí –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ {side} {symbol} amount={amount} price‚âà{price:.4f}")
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä
        order = exchange.create_market_order(symbol, ccxt_side, amount)
        
        # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ TP —ñ SL —á–µ—Ä–µ–∑ Bybit API (set_position_tpsl)
        time.sleep(0.5)  # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞
        
        try:
            # –î–ª—è Bybit Unified Trading –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é
            params = {
                'symbol': symbol.replace('/', '').replace(':USDT', ''),
                'takeProfit': str(tp_price),
                'stopLoss': str(sl_price),
                'tpTriggerBy': 'LastPrice',
                'slTriggerBy': 'LastPrice',
                'category': 'linear'
            }
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ Bybit –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL
            exchange.private_post_v5_position_trading_stop(params)
            print(f"TP/SL –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—ñ—Ä–∂—ñ: TP={tp_price:.4f}, SL={sl_price:.4f}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è TP/SL –Ω–∞ –±—ñ—Ä–∂—ñ: {e}")
            # Fallback - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            pass
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
        msg = f"""‚úÖ <b>–ü–û–ó–ò–¶–Ü–Æ –í–Ü–î–ö–†–ò–¢–û</b>

üî∏ {symbol} {side}
üí∞ –í—Ö—ñ–¥: {price:.4f} USDT
üìä –†–æ–∑–º—ñ—Ä: ${ORDER_SIZE_USDT} (√ó{LEVERAGE})
üéØ TP: {tp_price:.4f} (+{TP_PERCENT}%)
üõ° SL: {sl_price:.4f} (-{SL_PERCENT}%)"""
        
        tg_send(msg)
        return True
        
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
        tg_send(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
        return False

def check_closed_positions():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±—É–ª–∏ –∑–∞–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    global trades_history
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∑–∏—Ü—ñ–π –∑ PnL
        for symbol in SYMBOLS:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—ó (closed PnL)
                closed_pnl = exchange.fetch_closed_orders(symbol, limit=5)
                
                for trade in closed_pnl:
                    trade_id = trade.get('id')
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è–ª–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é
                    already_processed = any(
                        t.get('order_id') == trade_id 
                        for t in trades_history.get('trades', [])
                    )
                    
                    if already_processed:
                        continue
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –∑ PnL
                    if trade.get('status') == 'closed' and trade.get('side') in ['sell', 'buy']:
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π PnL –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ—Ä–¥–µ—Ä
                        info = trade.get('info', {})
                        
                        # –î–ª—è Bybit —Ä–µ–∞–ª—å–Ω–∏–π PnL –≤ –ø–æ–ª—ñ cumExecValue –∞–±–æ —Ç—Ä–µ–±–∞ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏
                        filled_qty = float(trade.get('filled', 0))
                        avg_price = float(trade.get('average', 0))
                        
                        if filled_qty > 0 and avg_price > 0:
                            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ PnL –∑ API
                            try:
                                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é PnL –ø–æ–∑–∏—Ü—ñ–π
                                pnl_history = exchange.fetch_my_trades(symbol, limit=10)
                                
                                # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç—Ä–µ–π–¥
                                pnl = 0
                                for t in pnl_history:
                                    if t.get('order') == trade_id:
                                        pnl = float(t.get('info', {}).get('closedPnl', 0))
                                        break
                                
                                if pnl == 0:
                                    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                                    continue
                                
                                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ü–µ TP —á–∏ SL
                                is_profit = pnl > 0
                                reason = "TP" if is_profit else "SL"
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
                                if is_profit:
                                    trades_history['wins'] = trades_history.get('wins', 0) + 1
                                else:
                                    trades_history['losses'] = trades_history.get('losses', 0) + 1
                                
                                trades_history['total_profit_usdt'] = trades_history.get('total_profit_usdt', 0.0) + pnl
                                
                                # –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–π–¥ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
                                trades_history['trades'].append({
                                    'order_id': trade_id,
                                    'symbol': symbol,
                                    'profit': pnl,
                                    'timestamp': now()
                                })
                                
                                save_trades_history(trades_history)
                                
                                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                profit_percent = (pnl / ORDER_SIZE_USDT) * 100
                                emoji = "‚úÖ" if is_profit else "‚ùå"
                                
                                msg = f"""{emoji} <b>–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û ({reason})</b>

üî∏ {symbol}
üíµ –ü—Ä–∏–±—É—Ç–æ–∫: {pnl:+.2f} USDT ({profit_percent:+.1f}%)
üìä –í—Ö—ñ–¥: {avg_price:.4f}"""
                                
                                tg_send(msg)
                                
                            except Exception as e:
                                print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è PnL: {e}")
                                continue
                        
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è {symbol}: {e}")
                continue
                
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ check_closed_positions: {e}")

# ------------------ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ------------------
def main_loop():
    mode = "TESTNET" if TESTNET else "üî¥ MAINNET"
    startup_msg = f"""ü§ñ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û</b>

–†–µ–∂–∏–º: {mode}
üíº –ë–∞–ª–∞–Ω—Å: {get_available_balance():.2f} USDT
üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {len(SYMBOLS)} –º–æ–Ω–µ—Ç
‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {POLL_INTERVAL}s"""
    
    if not TESTNET:
        startup_msg += "\n\n‚ö†Ô∏è <b>–†–ï–ê–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø!</b>"
    
    tg_send(startup_msg)
    send_main_menu()
    
    print("=== –°—Ç–∞—Ä—Ç –±–æ—Ç-—Ü–∏–∫–ª—É ===")
    
    while True:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
            check_closed_positions()
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ Telegram
            handle_telegram_callback()
            
            # –®—É–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
            for symbol in SYMBOLS:
                if not can_open_new_position(symbol):
                    continue
                
                try:
                    df = fetch_ohlcv_df(symbol)
                    df = calculate_indicators(df)
                    sig = signal_from_df(df)
                    
                    if sig == "LONG" and can_open_new_position(symbol):
                        open_position(symbol, "LONG")
                    elif sig == "SHORT" and can_open_new_position(symbol):
                        open_position(symbol, "SHORT")
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {symbol}: {e}")
                    continue
                
                time.sleep(1)
            
            time.sleep(POLL_INTERVAL)
            
        except Exception as e:
            print(f"{now()} ‚ùå Critical error: {e}")
            time.sleep(5)

if __name__ == "__main__":
    try:
        main_loop()
    except KeyboardInterrupt:
        print("\n=== –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ ===")
        tg_send("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
